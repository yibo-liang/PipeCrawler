
Block of Pipeline
    Input Buffer->
    Thread pool
        Threads->
    Output Buffer-> Act as the input buffer for the next block of pipeline

So a class Pipeblock implements a block of pipelining
Class Pipeblock implements Runnable{
    private InputBuffer ArrayList of Objects
    private OutPutBuffer ArrayList of Objects
    private worker class {set;}
//Analyser class
    private BlockAnalyser analyser = null;
    private BlockManager manager
    

    Pipeblock(Worker, InputBuffer, OutputBuffer, manager, analyser){
        set local private objects
    }
    
    timer;
    Override run(){
        
        if not null analyser.blockstart();
        while(manager==null or manager.running==true){
            while(manager.pause==true){
                thread sleep(100ms);
            }
            if (manager.running==false){
                break;
            }   
            if not null analyser {workstart();}
            
            Do{
                
                //Lock if buffer is a lockfree buffer
                
                Input=InputBuffer.pop();            
            }while(Input==null)
            
            if (manager.running==true){
                worker.work(Input, OutputBuffer);
                if not null analyser {workfinish();}
            }else{
                //push back the input and exit block
                InputBuffer.push(Input);
                break;
            }
        }
        if not null analyser.blockfinish();
    }

    workstart(){
        timer=current time in ms;
    }
    
    workfinish(){
        newtimer=current time in ms 
        latency = newtimer-timer
        analyser.done(latency);

    }

    
}

Abstract class Worker{
    work(Input, OutputBuffer){
        
    }
    
}

Class BlockManager{
    

    InputBuffer
    OutputBUffer
    ThreadNumber=default number {Set/Get};
    ThreadpoolExecuter
    Hashtable analysers
    Hashtable pipeblocks
    BlockManager(Worker, InputBuffer, OutputBuffer){
        set locals
    }

    BlockStart synchronized(){
        initialise Threadpool
        for n=1 to ThreadNumber{
            a = new analyser
            analysers.put(n, a);
            pb = new pipeblock(worker, InputBuffer, OutputBuffer, this, a);
            pipblocks.put(n, pb);
            threadpool.execute(pb);
        }
    }

    ReducePipesBy(int n){
        
    }

    IncreasePipesBy(int n){

    }

    GetAnalyseResult(){
        //calculate everything from analysers
        reset all analysers
        return BlockAnalysis;
    }

}

Class BlockAnalysis{
    BlockThroughput
    RunningThreads
    PausedThreads
    AverageLatency
    MaximumLatency
    MinimumLatency

}